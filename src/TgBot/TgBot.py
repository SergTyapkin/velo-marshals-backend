from dataclasses import dataclass
from threading import Thread
import json

import telebot

from src.connections import config
from src.database.databaseUtils import createSecretCode


@dataclass
class TgBotMessageTexts:
    registrationGotten = "‚ÑπÔ∏è –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ \"%s\".\n\n–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–∞—à–µ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"
    registrationCanceled = "‚ÑπÔ∏è –í–∞—à–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ \"%s\" –æ—Ç–º–µ–Ω–µ–Ω–∞"
    registrationConfirmed = "‚úÖ –í–∞—à–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ \"%s\" –ø—Ä–∏–Ω—è—Ç–∞!\n\n–ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –Ω–∞ —Ñ–µ—Å—Ç–∏–≤–∞–ª—å –≤ —Å–æ—Å—Ç–∞–≤–µ –º–∞—Ä—à–∞–ª–æ–≤"
    registrationRejected = "‚ùå –í–∞—à–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ \"%s\" –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞\n\n–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ –±—ã—Ç—å –≤ —Å–æ—Å—Ç–∞–≤–µ –º–∞—Ä—à–∞–ª–æ–≤ –≤ —ç—Ç–æ—Ç —Ä–∞–∑ :("


class TgBotClass:
    def __new__(cls, config):
        if not hasattr(cls, 'instance'):
            cls.token = config['tg_bot_token']
            cls.is_enabled = config['tg_bot_enabled']
            cls.thread = None
            cls.init(cls)
            cls.instance = super(TgBotClass, cls).__new__(cls)
        return cls.instance

    def init(self):
        if not self.is_enabled:
            print("TgBot not enabled in config")
            return

        try:
            self.bot = telebot.TeleBot(self.token)

            markupWithLinkButton = telebot.types.InlineKeyboardMarkup()
            btn1 = telebot.types.InlineKeyboardButton(
                text='–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç',
                url='https://marshals.ssu-it-dep.bmstu.ru'
            )
            markupWithLinkButton.add(btn1)

            @self.bot.message_handler(commands=['start'])
            def startHandler(message):
                deepLinkText = message.text.split()[1] if len(message.text.split()) > 1 else None
                print(f"TgBot get start command from #{message.from_user.id}, text: \"{message.text}\". Response with default text")
                if deepLinkText == 'auth_by_code':  # Generate enter by code auth link
                    secretCode = createSecretCode(message.from_user.id, "auth", json.dumps({
                        'id': message.from_user.id,
                        'first_name': message.from_user.first_name,
                        'last_name': message.from_user.last_name,
                        'username': message.from_user.username,
                    }))
                    print(f"TgBot generates auth by code. Code = {secretCode}")
                    markup = telebot.types.InlineKeyboardMarkup()
                    btnEnter = telebot.types.InlineKeyboardButton(
                        text='–í–æ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç–µ',
                        url=f'https://marshals.ssu-it-dep.bmstu.ru/login?code={secretCode}'
                    )
                    markup.add(btnEnter)
                    self.bot.send_message(
                        message.from_user.id,
                        "üîí –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –ø—Ä–æ—Ñ–∏–ª—å\n<i>–ö–Ω–æ–ø–∫–∞ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ä–æ–≤–Ω–æ —á–∞—Å</i>",
                        parse_mode='html',
                        reply_markup=markup
                    )
                else:
                    self.bot.send_message(
                        message.from_user.id,
                        "üìù –≠—Ç–æ—Ç –±–æ—Ç –±—É–¥–µ—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–µ–π—Å—Ç–≤–∏—è—Ö –Ω–∞ —Å–∞–π—Ç–µ.\n\n–°–∫–æ—Ä–µ–µ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ –≤–µ–ª–æ—Ñ–µ—Å—Ç–∏–≤–∞–ª—å!",
                        reply_markup=markupWithLinkButton
                    )

            @self.bot.message_handler()
            def anyMessageHandler(message):
                print(f"TgBot get message from #{message.from_user.id}:", message.text, ". Response with default text")
                self.bot.send_message(
                    message.from_user.id,
                    "‚ùó –ë–æ—Ç –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –∞ —Ç–æ–ª—å–∫–æ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –æ –¥–µ–π—Å—Ç–≤–∏—è—Ö –Ω–∞ —Å–∞–π—Ç–µ",
                    reply_markup=markupWithLinkButton
                )

            print("TgBot successfully initialized")
        except:
            print("TgBot: Cannot connect to Telegram Bot.")

        self.thread = Thread(target=self.startBotPolling, args=[self], daemon=True)
        self.thread.start()

    def sendMessage(self, userTgId: str, MessageText: str, *values: list[str]):
        if not self.is_enabled:
            print("TgBot not enabled in config")
            return
        message = MessageText % values
        print(f"TgBot send message to #{userTgId}:", message)
        self.bot.send_message(userTgId, message)

    def startBotPolling(self):
        if not self.is_enabled:
            return
        self.bot.polling(none_stop=True, interval=0)


TgBot = TgBotClass(config)
